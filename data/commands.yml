settings:
  docker:
    skip_build: False

parameters:
  doc_configs:
    - command: glob
      source: https://www.nushell.sh/commands/docs/glob.html
      trainset: >
        [{"instruction":"Find Rust files in the current directory.","command":{"name":"glob","args":["*.rs"],"flags":[]}},{"instruction":"Find all JSON files anywhere in the project.","command":{"name":"glob","args":["**/*.json"],"flags":[]}},{"instruction":"Search for .py files up to 3 directories deep.","command":{"name":"glob","args":["*.py"],"flags":[{"name":"--depth","desc":"directory depth to search","args":["3"]}]}},{"instruction":"Follow symbolic links when searching for all files anywhere.","command":{"name":"glob","args":["**/*"],"flags":[{"name":"--follow-symlinks","desc":"Whether to filter out symlinks from the returned paths","args":[]}]}},{"instruction":"Find files except in the .git directory recursively.","command":{"name":"glob","args":["*"],"flags":[{"name":"--exclude","desc":"Patterns to exclude from the search: glob will not walk the inside of directories matching the excluded patterns.","args":["[**/.git/**]"]}]}},{"instruction":"Find TypeScript config files but ignore node_modules and its content.","command":{"name":"glob","args":["tsconfig.json"],"flags":[{"name":"--exclude","desc":"Patterns to exclude from the search: glob will not walk the inside of directories matching the excluded patterns.","args":["[**/node_modules/**]"]}]}},{"instruction":"Search recursively for .js and .jsx files, but only up to 2 directories deep.","command":{"name":"glob","args":["**/*.{js,jsx}"],"flags":[{"name":"--depth","desc":"directory depth to search","args":["2"]}]}},{"instruction":"Find .rs files up to 2 directories deep, excluding the target folder.","command":{"name":"glob","args":["*.rs"],"flags":[{"name":"--depth","desc":"directory depth to search","args":["2"]},{"name":"--exclude","desc":"Patterns to exclude from the search: glob will not walk the inside of directories matching the excluded patterns.","args":["[**/target/]"]}]}},{"instruction":"Search for all files recursively, follow symlinks, and exclude .git and node_modules directories.","command":{"name":"glob","args":["**/*"],"flags":[{"name":"--follow-symlinks","desc":"Whether to filter out symlinks from the returned paths","args":[]},{"name":"--exclude","desc":"Patterns to exclude from the search: glob will not walk the inside of directories matching the excluded patterns.","args":["[**/.git/ **/node_modules]"]}]}},{"instruction":"Find recursively files except .log files.","command":{"name":"glob","args":["**/*"],"flags":[{"name":"--exclude","desc":"Patterns to exclude from the search: glob will not walk the inside of directories matching the excluded patterns.","args":["[**/*.log]"]}]}},{"instruction":"Search for .toml files following symlinks, but ignore .cache folders and their contents.","command":{"name":"glob","args":["*.toml"],"flags":[{"name":"--follow-symlinks","desc":"Whether to filter out symlinks from the returned paths","args":[]},{"name":"--exclude","desc":"Patterns to exclude from the search: glob will not walk the inside of directories matching the excluded patterns.","args":["[**/.cache/**]"]}]}},{"instruction":"Search for all JSON files anywhere that begin with an uppercase letter except temporary files ending with ~.","command":{"name":"glob","args":["**/[A-Z]*.json"],"flags":[{"name":"--exclude","desc":"Patterns to exclude from the search: glob will not walk the inside of directories matching the excluded patterns.","args":["[**/*~]"]}]}},{"instruction":"Search for files and folders like abc or xyz substituting a character for ?","command":{"name":"glob","args":["{a?c,x?z}"],"flags":[]}},{"instruction":"Search for files or folders that do not begin with c, C, b, M, or s","command":{"name":"glob","args":["[!cCbMs]*"],"flags":[]}},{"instruction":"Find items starting with 'build' case-insensitively in the current directory.","command":{"name":"glob","args":["(?i)build*"],"flags":[]}},{"instruction":"Find items that contain exactly four consecutive 'x' characters.","command":{"name":"glob","args":["<x*:4>"],"flags":[]}},{"instruction":"Find all JavaScript files under the src folder, recursively.","command":{"name":"glob","args":["src/**/*.js"],"flags":[]}},{"instruction":"Find all test specification files recursively under tests ending with .spec.ts.","command":{"name":"glob","args":["tests/**/*.spec.ts"],"flags":[]}},{"instruction":"Find CHANGELOG.md, SECURITY.md, or CONTRIBUTING.md anywhere in the project.","command":{"name":"glob","args":["**/{CHANGELOG.md,SECURITY.md,CONTRIBUTING.md}"],"flags":[]}},{"instruction":"Find all hidden files anywhere in the project.","command":{"name":"glob","args":["**/.*"],"flags":[]}},{"instruction":"Find all environment files anywhere in the project that start with .env.","command":{"name":"glob","args":["**/.env*"],"flags":[]}},{"instruction":"Find markdown files that are exactly two directories deep.","command":{"name":"glob","args":["*/*/*.md"],"flags":[]}},{"instruction":"Find TypeScript files exactly one directory deep under src.","command":{"name":"glob","args":["src/*/*.ts"],"flags":[]}},{"instruction":"List all items in the current directory, excluding directories.","command":{"name":"glob","args":["*"],"flags":[{"name":"--no-dir","desc":"Exclude directories from the returned results","args":[]}]}},{"instruction":"Find all .log files anywhere, but skip directories.","command":{"name":"glob","args":["**/*.log"],"flags":[{"name":"--no-dir","desc":"Exclude directories from the returned results","args":[]}]}},{"instruction":"Find all entries in the project root but exclude files, only keeping folders.","command":{"name":"glob","args":["*"],"flags":[{"name":"--no-file","desc":"Exclude files from the returned results","args":[]}]}},{"instruction":"List all directories recursively while ignoring files.","command":{"name":"glob","args":["**/*"],"flags":[{"name":"--no-file","desc":"Exclude files from the returned results","args":[]}]}},{"instruction":"Search for all .txt files but ignore symbolic links.","command":{"name":"glob","args":["**/*.txt"],"flags":[{"name":"--no-symlink","desc":"Exclude symbolic links from the returned results","args":[]}]}},{"instruction":"List all project files recursively while skipping symlinked items.","command":{"name":"glob","args":["**/*"],"flags":[{"name":"--no-symlink","desc":"Exclude symbolic links from the returned results","args":[]}]}}]
      evalset: >
        [{"instruction":"Search for *.rs files","command":{"name":"glob","args":["*.rs"],"flags":[]}},{"instruction":"Search for *.rs and *.toml files recursively up to 2 folders deep","command":{"name":"glob","args":["**/*.{rs,toml}"],"flags":[{"name":"--depth","desc":"directory depth to search","args":["2"]}]}},{"instruction":"Search for files and folders that begin with uppercase C or lowercase c","command":{"name":"glob","args":["[Cc]*"],"flags":[]}},{"instruction":"A case-insensitive search for files and folders that begin with c","command":{"name":"glob","args":["(?i)c*"],"flags":[]}},{"instruction":"Search for files or folders with 3 a's in a row in the name","command":{"name":"glob","args":["<a*:3>"],"flags":[]}},{"instruction":"Search for files or folders with only a, b, c, or d in the file name between 1 and 10 times","command":{"name":"glob","args":["<[a-d]:1,10>"],"flags":[]}},{"instruction":"Search for folders that begin with an uppercase ASCII letter, ignoring files and symlinks","command":{"name":"glob","args":["[A-Z]*"],"flags":[{"name":"--no-file","desc":"Whether to filter out files from the returned paths","args":[]},{"name":"--no-symlink","desc":"Whether to filter out symlinks from the returned paths","args":[]}]}},{"instruction":"Search for files named tsconfig.json that are not in node_modules directories recursively.","command":{"name":"glob","args":["tsconfig.json"],"flags":[{"name":"--exclude","desc":"Patterns to exclude from the search: `glob` will not walk the inside of directories matching the excluded patterns.","args":["[**/node_modules/**]"]}]}},{"instruction":"Search for all files that are not in the target nor .git directories and their contents","command":{"name":"glob","args":["**/*"],"flags":[{"name":"--exclude","desc":"Patterns to exclude from the search: `glob` will not walk the inside of directories matching the excluded patterns.","args":["[**/target/** **/.git/**]"]}]}},{"instruction":"Find all files but skip hidden files (those starting with .).","command":{"name":"glob","args":["**/*"],"flags":[{"name":"--exclude","desc":"Patterns to exclude from the search: glob will not walk the inside of directories matching the excluded patterns.","args":["[**/.*]"]}]}},{"instruction":"Search for .py files except those ending with _test.py.","command":{"name":"glob","args":["*.py"],"flags":[{"name":"--exclude","desc":"Patterns to exclude from the search: glob will not walk the inside of directories matching the excluded patterns.","args":["[**/*_test.py]"]}]}},{"instruction":"Search for files recursively following symbolic links to their targets","command":{"name":"glob","args":["**/*"],"flags":[{"name":"--follow-symlinks","desc":"Whether to follow symbolic links to their targets","args":[]}]}}]
    
    - command: cal
      source: https://www.nushell.sh/commands/docs/cal.html
